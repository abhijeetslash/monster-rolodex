{"version":3,"sources":["components/card/card.jsx","components/cardList/cardList.jsx","components/searchMonster/searchMonster.jsx","App.js","serviceWorker.js","index.js"],"names":["card","props","name","email","id","className","src","alt","cardList","monsters","map","monster","key","searchMonster","searchText","type","onChange","App","event","text","target","value","setState","searchField","state","a","fetch","res","json","users","fetchData","filteredMonsters","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qVAiBeA,G,kBAbF,SAAAC,GAAU,IAEZC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GAEpB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAA1B,aAAyCG,IAAI,KACrD,4BAAKL,GACL,4BAAKC,MCUFK,EAjBE,SAACP,GAAW,IAElBQ,EAAYR,EAAZQ,SAEP,OACI,yBAAKJ,UAAU,aAEbI,EAASC,KAAI,SAACC,GAEZ,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAQP,GAAIA,GAAIO,EAAQP,GAAIF,KAAMS,EAAQT,KAAMC,MAAOQ,EAAQR,aCL9EU,EAPO,SAAAZ,GAAU,IAErBa,EAAcb,EAAda,WAEP,OAAO,2BAAOC,KAAK,OAAOC,SAAUF,KC2DzBG,E,kDAzDb,aAAc,IAAD,8BACX,gBAiCFH,WAAa,SAACI,GAEZ,IAAMC,EAAOD,EAAME,OAAOC,MAC1B,EAAKC,SAAS,CACZC,YAAaJ,KApCf,EAAKK,MAAQ,CACXf,SAAS,GACTc,YAAa,IAJJ,E,gEAQO,IAAD,QAWF,uCAAG,8BAAAE,EAAA,sEAEEC,MAAM,8CAFR,cAEVC,EAFU,gBAGIA,EAAIC,OAHR,OAGVC,EAHU,OAKhB,EAAKP,SAAS,CACRb,SAAWoB,IAND,2CAAH,qDAWfC,K,+BAaO,IAAD,OAEAC,EADc,YAAOC,KAAKR,MAAMf,UACEwB,QAAO,SAACtB,GAC9C,OAAOA,EAAQT,KAAKgC,cAAcC,SAAS,EAAKX,MAAMD,YAAYW,kBAEpE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,CAAeS,WAAYkB,KAAKlB,aAChC,kBAAC,EAAD,CAAUL,SAAUsB,S,GArDVK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1d0a24cc.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\nconst card = props => {\n\n    const {name, email, id} = props;\n\n    return (\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${id}?set=set2`} alt=\"\"/>\n            <h1>{name}</h1>\n            <h2>{email}</h2>\n        </div>\n    )\n}\n\nexport default card;","import React from 'react';\nimport './cardList.css';\n\nimport Card from '../card/card';\n\nconst cardList = (props) => {\n\n    const {monsters} = props;\n\n    return (\n        <div className=\"card-list\">\n            {\n          monsters.map((monster) => {\n\n            return <Card key={monster.id} id={monster.id} name={monster.name} email={monster.email}/>\n\n          })\n          }\n        </div>\n    )\n}\n\nexport default cardList;","import React from 'react';\n\nconst searchMonster = props => {\n\n    const {searchText} = props;\n\n    return <input type=\"text\" onChange={searchText}/>\n}\n\nexport default searchMonster;","import React,{Component} from 'react';\nimport './App.css';\n\nimport CardList from './components/cardList/cardList';\nimport SearchMonster from './components/searchMonster/searchMonster';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    // .then(res => {\n    //   return res.json()\n    // }).then(users => {\n    //   this.setState({\n    //     monsters : users\n    //   });\n    // })\n\n    const fetchData = async() => {\n\n      const res = await fetch('https://jsonplaceholder.typicode.com/users');\n      const users = await res.json();\n      \n      this.setState({\n            monsters : users\n           });\n\n    }\n\n    fetchData();\n\n  }\n\n  searchText = (event) => {\n    \n    const text = event.target.value;\n    this.setState({\n      searchField: text\n    });\n\n}\n\n  render(){\n    const filterMonsters = [...this.state.monsters];\n    const filteredMonsters = filterMonsters.filter((monster)=>{\n      return monster.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <SearchMonster searchText={this.searchText}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}